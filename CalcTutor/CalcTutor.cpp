// CalcTutor.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//

#include <iostream> // Стандартная библиотека Cpp для осуществления ввода-вывода
#include "Calculator.h"

using namespace std; // Явное указание пространства имен стандартной библиотеки (Без этой строки каждое ключевое слово из библиотеки должно быть предшествует для std:: обозначения область.)

int main()
{
    double x = 0.0; // Объявление переменных
    double y = 0.0;
    double result = 0.0;
    char oper = '+';
    
    cout << "Calculator Console Application" << endl << endl; //Ключевое слово cout используется для вывода сведений в стандартный поток вывода в Cpp. Оператор << указывает компилятору отправить все содержимое справа от него в стандартный поток вывода
    cout << "Please enter the operation to perform. Format: a+b | a-b | a*b | a/b" << endl; // endl - перемещает курсор на следующую строку
    
    Calculator c; // Объявляет объект "c" в качестве экземпляра (объекта) класса Calculator. Сам класс является лишь схемой для описания работы калькуляторов, а объект — это конкретный калькулятор, который выполняет вычисления.
    while (true) // Бесконечный цикл
    {
        cin >> x >> oper >> y; // Оператор ввода
        if (oper == '/' && y == 0)
        {
            cout << "Math error: Attempted to divide by zero!" << endl;
            continue; // Пропуск итерации цикла игнорируя весь остальной код
        }
        else
        {
            result = c.Calculate(x, oper, y); // Вызывает определенную ранее функцию Calculate и предоставляет введенные входные значения. Затем она возвращает число, сохраняемое в result
        }
        cout << "Result " << "of " << x << oper << y << " is: " << result << endl;
        
        
    }

    return 0;
}
// Запуск программы: CTRL+F5 или меню "Отладка" > "Запуск без отладки"
// Отладка программы: F5 или меню "Отладка" > "Запустить отладку"

// Советы по началу работы 
//   1. В окне обозревателя решений можно добавлять файлы и управлять ими.
//   2. В окне Team Explorer можно подключиться к системе управления версиями.
//   3. В окне "Выходные данные" можно просматривать выходные данные сборки и другие сообщения.
//   4. В окне "Список ошибок" можно просматривать ошибки.
//   5. Последовательно выберите пункты меню "Проект" > "Добавить новый элемент", чтобы создать файлы кода, или "Проект" > "Добавить существующий элемент", чтобы добавить в проект существующие файлы кода.
//   6. Чтобы снова открыть этот проект позже, выберите пункты меню "Файл" > "Открыть" > "Проект" и выберите SLN-файл.
